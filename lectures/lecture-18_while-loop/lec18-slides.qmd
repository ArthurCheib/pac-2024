---
title: "<span style='color:#FFC61A'> Loops in R (III) </span>"
title-slide-attributes: 
  data-background-image: images/background-harris.jpg
subtitle: "<span style='color:#FFFFFF'> The `while` loop </span>"
format:
  revealjs:
    incremental: true
    footer: "<span style='color:#FFFFFF'> Policy Analytics Credential </span>"
    logo: images/harris_logo.png
    progress: true
    menu: true
    code-line-numbers: true
    embed-resources: true
editor: source
---

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

## Data we will be using to plot!
library(gapminder)
library(tidyverse)
library(ggthemes)
data(gapminder)
```

# [Today's agenda]{style="color:#FFC61A"}

# [`While` loops in R]{style="color:#FFC61A"}

-   `while` loops execute code as long as a specified condition is `TRUE.`
-   Essential for tasks where the number of iterations isn't known in advance.
-   Common use includes processing until a condition is met
-   Be careful with the condition to prevent infinite loops!

## The `while` loop - case I

::: {style="margin-top: 10px;"}
:::

::: fragment
-   `while` loops execute code as long as a specified condition is `TRUE.`
-   What we need to write a `while` loop?
    -   **A Condition:** A logical statement that is evaluated before each iteration. The loop continues as long as this condition remains TRUE.
    -   **A Body of Code:** The set of operations to execute on each iteration as long as the condition is true, enclosed in {}.
:::

## The `while` loop - case I

::: fragment
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1,2|4-7|9-11"

# Initialize a counter variable
counter <- 1

# Start a while loop with the condition that the counter is less than or equal to 5
while (counter <= 5) {
  # Print the current value of the counter
  print(paste("Counter is at:", counter))
  
  # Increment the counter by 1
  counter <- counter + 1
}
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

# Initialize a counter variable
counter <- 1

# Start a while loop with the condition that the counter is less than or equal to 5
while (counter <= 5) {
  # Print the current value of the counter
  print(paste("Counter is at:", counter))
  
  # Increment the counter by 1
  counter <- counter + 1
}
```
:::

## The `while` loop - case II {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1,2|4,5|6-10"

# Initialize row index
row_index <- 1

# Condition to check if GDP per capita is less than a threshold
while (gapminder[row_index, "gdpPercap"] < 3000 & row_index <= nrow(gapminder)) {
  print(paste("Country:", gapminder[[row_index, 'country']],
              "- GDP per Capita:", gapminder[row_index, "gdpPercap"]))
  # Increment row_index by 1 = move to the next row
  row_index <- row_index + 1  
}
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

# Initialize row index
row_index <- 1

# Condition to check if GDP per capita is less than a threshold
while (gapminder[row_index, "gdpPercap"] < 3000 & row_index <= nrow(gapminder)) {
  print(paste("Country:", gapminder[[row_index, 'country']],
              "- GDP per Capita:", gapminder[row_index, "gdpPercap"]))
  # Increment row_index by 1 = move to the next row
  row_index <- row_index + 1  
}
```
:::

# [Lecture recap]{style="color:#FFC61A"}

- while loops run as long as the condition remains TRUE.
- ideal for when the exact number of iterations is unknown.
- critical to ensure the loop's condition will eventually be FALSE.
- can iterate over a single unique element (counter example) and processing dataset rows.

# [Stay tuned!]{style="color:#FFC61A"} {background-image="images/background-harris.jpg"}
