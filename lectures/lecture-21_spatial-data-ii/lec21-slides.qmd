---
title: "<span style='color:#FFC61A'> Spatial Data in R </span>"
title-slide-attributes: 
  data-background-image: images/background-harris.jpg
subtitle: "<span style='color:#FFFFFF'> Customizing maps in `leaflet` </span>"
format:
  revealjs:
    incremental: true
    footer: "<span style='color:#FFFFFF'> Policy Analytics Credential </span>"
    logo: images/harris_logo.png
    progress: true
    menu: true
    code-line-numbers: true
    embed-resources: true
editor: source
---

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| include: false

## Data we will be using to plot!
library(gapminder)
library(tidyverse)
library(ggthemes)
library(leaflet)
library(leaflet.extras)
library(sf)
data(gapminder)
cps_schools <- read_csv('cps_schools_database.csv')
chicago_districs <- st_read('chicago-boundaries/geo_export_b21dfc02-7a82-4040-a2f2-f8112039d641.shp')
cps_schools_red <- cps_schools[1:346, ]
cps_schools_blue <- cps_schools[347:693, ]
```

# [Today's agenda]{style="color:#FFC61A"}

# [Customizing maps]{style="color:#FFC61A"}

-   Search feature
-   Adding control features
-   Cluster options (too much data!)
-   Adding shape files to our map!

## `leaflet`: search engine {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   A search feature can be interesting for interaction
-   And very useful to confirm geolocation data
:::

::: fragment
```{r}
#| code-line-numbers: "1-3|5-13|14"
#| echo: true
#| eval: false

# Loading an extra package (which cointains the function we want)
install.packages('leaflet.extras')
library(leaflet.extras)

# Adding the searchOSM feature
cps_schools |> 
  leaflet() |> 
  addProviderTiles("CartoDB") |> 
  addCircleMarkers(lng = ~school_long,
                   lat = ~school_lat,
                   radius = 5,
                   color = "red",
                   label = ~school_nm) |> 
  addSearchOSM()
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

cps_schools |> 
  leaflet() |> 
  addProviderTiles("CartoDB") |> 
  addCircleMarkers(lng = ~school_long,
                   lat = ~school_lat,
                   radius = 5,
                   color = "red",
                   label = ~school_nm) |> 
  addSearchOSM()
```
:::

## `leaflet`: group creation {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   A search feature can be interesting for interaction
-   And very useful to confirm geolocation data
:::

::: fragment
```{r}
#| code-line-numbers: "1-4|5-10|8,9|11-17|14,15"
#| echo: true
#| eval: false


## Changing the mapping method
# And adding the `color` and `group` parameters within the calls
leaflet() |> 
  addProviderTiles("CartoDB") |> 
  addCircleMarkers(lng = cps_schools_blue$school_long,
                   lat = cps_schools_blue$school_lat,
                   radius = 5,
                   color = 'blue',
                   group = 'selected',
                   label = cps_schools_blue$school_nm) |> 
    addCircleMarkers(lng = cps_schools_red$school_long,
                   lat = cps_schools_red$school_lat,
                   radius = 5,
                   color = 'red',
                   group = 'control',
                   label = cps_schools_red$school_nm) |> 
  addSearchOSM()
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

leaflet() |> 
  addProviderTiles("CartoDB") |> 
  addCircleMarkers(lng = cps_schools_blue$school_long,
                   lat = cps_schools_blue$school_lat,
                   radius = 5,
                   color = "blue",
                   group = 'selected',
                   label = cps_schools_blue$school_nm) |> 
    addCircleMarkers(lng = cps_schools_red$school_long,
                   lat = cps_schools_red$school_lat,
                   radius = 5,
                   color = "red",
                   group = 'control',
                   label = cps_schools_red$school_nm) |> 
  addSearchOSM()
```
:::

## `leaflet`: clustering {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   When we have too much data (too much points), the map can get crowded, and a good option to solve this is to cluster the points!
:::

::: fragment
```{r}
#| code-line-numbers: "1-4|5-10|10|11-18|17"
#| echo: true
#| eval: false


## Clustering the points in the graph
leaflet() |> 
  addProviderTiles("CartoDB") |> 
  addCircleMarkers(lng = cps_schools_blue$school_long,
                   lat = cps_schools_blue$school_lat,
                   radius = 5,
                   color = "blue",
                   group = 'selected',
                   label = cps_schools_blue$school_nm,
                   clusterOptions = markerClusterOptions()) |> 
    addCircleMarkers(lng = cps_schools_red$school_long,
                   lat = cps_schools_red$school_lat,
                   radius = 5,
                   color = "red",
                   group = 'control',
                   label = cps_schools_red$school_nm,
                   clusterOptions = markerClusterOptions()) |> 
  addSearchOSM()
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

leaflet() |> 
  addProviderTiles("CartoDB") |> 
  addCircleMarkers(lng = cps_schools_blue$school_long,
                   lat = cps_schools_blue$school_lat,
                   radius = 5,
                   color = "blue",
                   group = 'selected',
                   label = cps_schools_blue$school_nm,
                   clusterOptions = markerClusterOptions()) |> 
    addCircleMarkers(lng = cps_schools_red$school_long,
                   lat = cps_schools_red$school_lat,
                   radius = 5,
                   color = "red",
                   group = 'control',
                   label = cps_schools_red$school_nm,
                   clusterOptions = markerClusterOptions()) |> 
  addSearchOSM()
```
:::

## `leaflet`: adding polygons {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   We can also add polygons
-   Normally, .shp type of files
-   It's a different data structure in R
:::

::: fragment
```{r}
#| code-line-numbers: "1,2,3|5-22|23-29"
#| echo: true
#| eval: false

# Reading a shape file with `st_read` from the sf package
library(sf)
chicago_districs <- st_read('chicago-boundaries/chciago_shape.shp')

## Clustering the points in the graph
leaflet() |> 
  addProviderTiles("CartoDB") |> 
  addCircleMarkers(lng = cps_schools_blue$school_long,
                   lat = cps_schools_blue$school_lat,
                   radius = 5,
                   color = "blue",
                   group = 'selected',
                   label = cps_schools_blue$school_nm,
                   clusterOptions = markerClusterOptions()) |> 
    addCircleMarkers(lng = cps_schools_red$school_long,
                   lat = cps_schools_red$school_lat,
                   radius = 5,
                   color = "red",
                   group = 'control',
                   label = cps_schools_red$school_nm,
                   clusterOptions = markerClusterOptions()) |> 
  addSearchOSM() |> 
  ## Adding the shape file as the final layer
  addPolygons(data = chicago_districs,
              weight = 2,
              opacity = 0.5,
              color = 'orange',
              dashArray = '3',
              fillOpacity = 0.2)
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

leaflet() |> 
  addProviderTiles("CartoDB") |> 
  addCircleMarkers(lng = cps_schools_blue$school_long,
                   lat = cps_schools_blue$school_lat,
                   radius = 5,
                   color = "blue",
                   group = 'selected',
                   label = cps_schools_blue$school_nm,
                   clusterOptions = markerClusterOptions()) |> 
    addCircleMarkers(lng = cps_schools_red$school_long,
                   lat = cps_schools_red$school_lat,
                   radius = 5,
                   color = "red",
                   group = 'control',
                   label = cps_schools_red$school_nm,
                   clusterOptions = markerClusterOptions()) |> 
  addSearchOSM() |> 
  ## Adding the shape file as the final layer
  addPolygons(data = chicago_districs,
              weight = 2,
              opacity = 0.2,
              color = 'orange',
              dashArray = '3',
              fillOpacity = 0.2)
```
:::

# [Lecture recap]{style="color:#FFC61A"}

-   We've learned how to:
    -   Add a `search` feature to our map
    -   Add user `control` features
    -   Numerical `clusterize` our data when needed
    -   Add `shape` files to our map!

# [Stay tuned!]{style="color:#FFC61A"} {background-image="images/background-harris.jpg"}
