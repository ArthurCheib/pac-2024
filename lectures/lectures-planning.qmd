---
title: "<span style='color:#FFC61A'> PAC Lectures - Course Plan </span>"
title-slide-attributes: 
  data-background-image: images/background-harris.jpg
subtitle: "<span style='color:#FFFFFF'> Lectures 13 through 24 </span>"
format:
  revealjs:
    incremental: true
    footer: "<span style='color:#FFFFFF'> Policy Analytics Credential </span>"
    logo: images/harris_logo.png
    progress: false
    menu: false
editor: visual
---

# Lecture 14

# [More on `ggplot2`]{style="color:#FFC61A"}

-   Faceting graphs in `ggplot2`
    -   breaking our data into smaller parts (graphically)
    -   more graphs with only a single line
    -   no need to copy and paste code
-   Advanced plot customizations

## Faceting: `facet_wrap` {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   This is how we ended our first ggplot2 lesson!
:::

::: fragment
```{r}
#| code-line-numbers: "1|2|3|4,5,6,7,8,9|10|11|12"
#| echo: true
#| eval: false

## 
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

##
```
:::

## Faceting: `facet_wrap` {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   What if we need to display the information on more than one country?
-   Faceting is how we break the data - visually - into more categories
-   Remember: `ggplot2` is all about mapping information on the data to visual aspects of our graph!
:::

::: fragment
```{r}
#| code-line-numbers: "1,2,3|4,5,6,7,8,9,10,11,12,13,14,15,16|17"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## `gglpot2`: themes {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   When using ggplot2, we can:
-   Use predefined themes
-   Make our own basic theme adjustments
-   Add some just some elements on top of a theme that we liked
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## Using predefined themes

::: {style="margin-top: 10px;"}
:::

::: fragment
-   `ggplot2` built-in themes
-   The `ggthemes` package
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## Making small adjustments

::: {style="margin-top: 10px;"}
:::

::: fragment
-   Some graph elements:
    -   `element_text`
    -   `element_line`
-   Customizing legend and background
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## Interesting features!

::: {style="margin-top: 10px;"}
:::

::: fragment
-   The `ggrepel` package
-   Highlighting some aspects of our graph!
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

# Lecture 15

# [Control Flow]{style="color:#FFC61A"}

-   Conditional execution allows programs to perform different actions based on whether a condition is `TRUE` or `FALSE`
-   The most basic version of a control flow is know as the `if` statement
-   Conditions normally include logical tests (comparison operators)
-   Later: `else`, the extended version of the `if` statement

## The `if` statement

::: {style="margin-top: 10px;"}
:::

::: fragment
-   Evaluate a condition and what to do if it evaluates to `TRUE`
-   Not only a single action, but a whole chunk of code
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## The `else` statement

::: {style="margin-top: 10px;"}
:::

::: fragment
-   The `else` statement extends the control flow of our code for cases when the condition evaluates to `FALSE.`
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## The `if_else` function

::: {style="margin-top: 10px;"}
:::

::: fragment
-   So what about the `if_else()` function?
-   Where the if-else statement is a control flow mechanism, the `if_else()` function is designed for working within data manipulation, not whole chunks of code!
-   It's an extremely powerful tool function though!
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

# Lecture 16

# [`For` loops in R]{style="color:#FFC61A"}

-   `for` loops iterate over sequences, executing code for each element.
-   Ideal for automating repetitive tasks across data structures
-   Facilitates batch data processing!
-   Used when iteration count is predetermined.
-   Make sure you keep your `loops` simple!

## The `for` loop - case I

::: {style="margin-top: 10px;"}
:::

::: fragment
-   `for` loops iterate over sequences, executing code for each element.
-   What we need to write a for loop?
    -   **A sequence:** the set of values to iterate over
    -   **A loop variable:** a placeholder that takes on each value in the sequence as the loop iterates
    -   **A body of code:** the operations or tasks to perform on each iteration
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## The `for` loop - case II

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

# Lecture 17

# [`While` loops in R]{style="color:#FFC61A"}

-   `while` loops execute code as long as a specified condition is `TRUE.`
-   Essential for tasks where the number of iterations isn't known in advance.
-   Common use includes processing until a condition is met
-   Be creful with the condition to prevent infinite loops!

## The `while` loop - case I

::: {style="margin-top: 10px;"}
:::

::: fragment
-   `while` loops execute code as long as a specified condition is `TRUE.`
-   What we need to write a `while` loop?
    -   **A Condition:** A logical statement that is evaluated before each iteration. The loop continues as long as this condition remains TRUE.
    -   **A Body of Code:** The set of operations to execute on each iteration as long as the condition is true, enclosed in {}.
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## The `while` loop - case II

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

# Lecture 18

# [More on `for` loops in R]{style="color:#FFC61A"}

-   I understand what the for loop is doing...
-   ... but how to write one?

## `for` loop - Cookbook

::: {style="margin-top: 10px;"}
:::

::: fragment
-   **Step 1 - Identify the Sequence:** Determine the sequence or set of elements you want to iterate over.
-   **Step 2 - Define the Loop Variable:** Choose a variable name that will represent each element of the sequence during the loop's iterations.
-   **Step 3 - Write the Loop Structure:** Make sure you don't mistakes on the syntax
-   **Steep 4 - Test the Loop:** Run the loop with a simple, known sequence to ensure it behaves as expected.
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

# Lecture 19

# [Spatial Data in R]{style="color:#FFC61A"}

-   Data that represents physical locations on Earth.
    -   Data is described by coordinates: lat / long
-   Allow us to unveil patterns and trends geographically.
-   R's ggplot2 and ggmap offer powerful visualization tools.
-   `ggplot2`: Creates detailed spatial visualizations.
-   `leaflet`: Creates detailed interactive data viz
-   Useful in environmental studies, urban planning, and more.

## The `leaflet` package

::: {style="margin-top: 10px;"}
:::

::: fragment
-   A powerful and versatile tool for creating interactive maps in R
-   Enables users to dynamically explore spatial data
-   Offers extensive options for custom markers, layers, and pop-ups.
-   Seamlessly integrates with ggplot2 and spatial objects from packages like sf.
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## The `leaflet` package

::: {style="margin-top: 10px;"}
:::

::: fragment
-   Adding data to our map!
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

## The `leaflet` package

::: {style="margin-top: 10px;"}
:::

::: fragment
-   Adding data to our map!
:::

::: fragment
```{r}
#| code-line-numbers: "1,2"
#| echo: true
#| eval: false

##
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## 
```
:::

# Lecture 20

# [Layers and control in `leaflet`]{style="color:#FFC61A"}

-   Different types of layers (tile, marker, polygon) in Leaflet
-   How to add and customize base and overlay layers
-   Incorporating zoom, layer selection, and other controls
-   Enhancing maps with interactive layer actions

# Lecture 21

# [Building Shiny Apps]{style="color:#FFC61A"}

-   `Shiny` is a web application framework for R, enabling interactive web apps directly from R
-   It allows for dynamic visualization and interaction with the data
-   It has a simple syntax, no need for HTML or JavaScript knowledge
-   Reactivity: automatically updates outputs based on user's inputs
-   Accessibility: a shiny app can be easily and freely deployed!

# Lecture 22

# [Writing functions in R]{style="color:#FFC61A"}

-   Crafting functions = tailoring personalized data solutions!
-   Write once, use multiple times (if well written)!
-   Streamlines data analysis workflows
-   Facilitates code sharing code among peers (reproducible research)

# Lecture 23

# [More on writing functions]{style="color:#FFC61A"}

-   I understand the advantages of writing a function, but...
-   ... When do I know I need one?
-   ... How does the thought process look like?

## The writing functions Cookbook

::: {style="margin-top: 10px;"}
:::

::: fragment
- Ingredients:
  - Function's Name: a name that reflects the function's purpose
  - Arguments: the inputs the function will take (placeholders)
  - Function Body: the core set of instructions to be executed
  - Return Value: what the function should output or result in

- Steps:
  - Write the code once, without thinking in a function
  - Discover what could be parameterized
  - Write down the parameters
  - Put the chunk of code inside the function()
:::

# Lecture 24

# [Quarto]{style="color:#FFC61A"}
