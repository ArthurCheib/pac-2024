---
title: "<span style='color:#FFC61A'> Advanced Topics </span>"
title-slide-attributes: 
  data-background-image: images/background-harris.jpg
subtitle: "<span style='color:#FFFFFF'> Writing Functions in R (II) </span>"
format:
  revealjs:
    incremental: true
    footer: "<span style='color:#FFFFFF'> Policy Analytics Credential </span>"
    logo: images/harris_logo.png
    progress: true
    menu: true
    code-line-numbers: true
    embed-resources: true
editor: source
---

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

## Data we will be using to plot!
library(gapminder)
library(tidyverse)
library(ggthemes)
data(gapminder)
```

# [Today's agenda]{style="color:#FFC61A"}

# [More on writing functions]{style="color:#FFC61A"}

-   I understand the advantages of writing a function, but...
-   ... When do I know I need one?
-   ... How does the thought process look like?

## The writing functions Cookbook

::: {style="margin-top: 10px;"}
:::

::: fragment
- Ingredients:
  - **Name:** a name that reflects the function's purpose
  - **Arguments:** the inputs it will take (placeholders)
  - **Function Body:** the core set of instructions to be executed
  - **Return Value:** what the function should output or result in

- Steps:
  - Write the code once, without thinking in a function
  - Discover what could be parameterized
  - Write down the parameters
  - Put the chunk of code inside the function()
:::

## The writing functions Cookbook {.scrollable}

::: {style="margin-top: 10px;"}

:::

::: fragment
- **1st step:**
  - Write the operation as if you were doing this manually
- Another way of thinking is: write the code for one case only
- Example:
  - Suppose we want to customize a message and print the result everytime we calculate the mean of a different numeric vectors.
:::

::: fragment
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1,2|4-6"

# A vector of numeric values
numeric_vector <- c(4, 8, 15, 16, 23, 42)

# Calculate the mean of the vector
mean_value <- mean(numeric_vector)
print(str_c('The average for your group of element is: ', mean_value))
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

# A vector of numeric values
numeric_vector <- c(4, 8, 15, 16, 23, 42)

# Calculate the mean of the vector
mean_value <- mean(numeric_vector)
print(str_c('The average for your group of element is:', mean_value))
```
:::


## The writing functions Cookbook {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
- **2nd step:**
  - Discover what could be parameterized
  - Parameterized = what is changing here?
  
- **3rd step:**
  - Then, set such thing equal to a paramenter (variable)
  
- **4th step:**
  - Put parameterized code inside the function call
:::


::: fragment
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1,2|4-10|11-15"

# A vector of numeric values
numeric_vector <- c(4, 8, 15, 16, 23, 42)

# Define a function to calculate the mean of a numeric vector
calculate_mean <- function(numeric_vector) {
  # The mean_value is parameterized here
  mean_value <- mean(numeric_vector)
  return(print(str_c('The average for your group of element is:', mean_value)))
}

## Using the function
calculate_mean(numeric_vector)
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

# A vector of numeric values
numeric_vector <- c(4, 8, 15, 16, 23, 42)

# Define a function to calculate the mean of a numeric vector
calculate_mean <- function(numeric_vector) {
  # Calculate and return the mean of the vector
  mean_value <- mean(numeric_vector)
  return(print(str_c('The average for your group of element is: ', mean_value)))
}

## Using the function
calculate_mean(numeric_vector)
```
:::

# [Lecture recap]{style="color:#FFC61A"}

- 

# [Stay tuned!]{style="color:#FFC61A"} {background-image="images/background-harris.jpg"}

