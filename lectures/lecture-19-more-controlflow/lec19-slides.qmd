---
title: "<span style='color:#FFC61A'> Control Flow Statements </span>"
title-slide-attributes: 
  data-background-image: images/background-harris.jpg
subtitle: "<span style='color:#FFFFFF'> The `else if` statement </span>"
format:
  revealjs:
    incremental: true
    footer: "<span style='color:#FFFFFF'> Policy Analytics Credential </span>"
    logo: images/harris_logo.png
    progress: true
    menu: true
    code-line-numbers: true
    embed-resources: true
editor: source
---

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

## Data we will be using to plot!
library(gapminder)
library(tidyverse)
library(ggthemes)
data(gapminder)
```

# [Today's agenda]{style="color:#FFC61A"}

- Quick recap of control flow
  - The `if` statement
  - Reminder of comparisons operators
  - The `if-else` statement
- Introducting a new extension!
  - The `else if` statement

## The `else` statement

::: {style="margin-top: 10px;"}
:::

::: fragment
-   The `else` statement extends the control flow of our code for cases when the condition evaluates to `FALSE.`
:::

::: fragment
```{r}
#| code-line-numbers: "1|3,4|6-9|10-13"
#| echo: true
#| eval: false

## Basic syntax of an if-else-statement

# Define a variable with a numeric value
number <- -10

# Condition being evaluated: check if the number is greater than 0
if (number > 0) {
  # This line executes if the condition is TRUE
  print("The number is positive.")
} else {
  # This line executes if the condition is FALSE
  print("The number is not positive.")
}
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

# Define a variable with a numeric value
number <- -10

# Condition being evaluated: check if the number is greater than 0
if (number > 0) {
  # This line executes if the condition is TRUE
  print("The number is positive.")
} else {
  # This line executes if the condition is FALSE
  print("The number is not positive.")
}
```
:::

## The `if else` statement - case I {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   The `if else` statement extends the control flow of our code for cases when the condition evaluates to `FALSE.`, but it also adds a **new test!**
:::

::: fragment
```{r}
#| code-line-numbers: "1,2|4-7|9-12|14-18"
#| echo: true
#| eval: false

# Define a variable with a numeric value
number <- 0

# Condition being evaluated: check if the number is greater than 0
if (number > 0) {
  # This line executes if the condition is TRUE
  print("The number is positive.")
  
  # This line executes if the condition is FALSE, AND, if the new condition is TRUE
} else if (number == 0) {
  
  print('The number is zero')
  
} else {
  # This line executes if the condition is FALSE
  print("The number is negative")
  
}
```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true


# Define a variable with a numeric value
number <- 0

# Condition being evaluated: check if the number is greater than 0
if (number > 0) {
  # This line executes if the condition is TRUE
  print("The number is positive.")
  
  # This line executes if the condition is FALSE, AND, if the new condition is TRUE
} else if (number == 0) {
  
  print('The number is zero')
  
} else {
  # This line executes if the condition is FALSE
  print("The number is negative")
  
}
```
:::


## The `if else` statement - case II {.scrollable}

::: {style="margin-top: 10px;"}
:::

::: fragment
-   The `if else` statement extends the control flow of our code for cases when the condition evaluates to `FALSE.`, but it also adds a **new test!**
:::

::: fragment
```{r}
#| code-line-numbers: "1,2|4-6|7,8|9,10|11,12|13-15"
#| echo: true
#| eval: false

## Let's create a variable that equals the grade of a student
grade <- 85
message <- "Student's final grade is "

## Now, let's categorize it
if (grade >= 90) {
  print(str_c(message, "A"))
} else if (grade >= 80) {
  print(str_c(message, "B"))
} else if (grade >= 70) {
  print(str_c(message, "C"))
} else if (grade >= 60) {
  print(str_c(message, "D"))
} else {
  print(str_c(message, "F"))
}

```
:::

::: {style="margin-top: 10px;"}
:::

::: fragment
```{r}
#| echo: false
#| eval: true

## Let's create a variable that equals the grade of a student
grade <- 85
message <- "Student's final grade is "

## Now, let's categorize it
if (grade >= 90) {
  print(str_c(message, "A"))
} else if (grade >= 80) {
  print(str_c(message, "B"))
} else if (grade >= 70) {
  print(str_c(message, "C"))
} else if (grade >= 60) {
  print(str_c(message, "D"))
} else {
  print(str_c(message, "F"))
}
```
:::



# [Lecture recap]{style="color:#FFC61A"}

- The else if extension allow us to:
  - **Sequential Checks:** tests for other conditions in order, until one is true.
  - **First True Block:** executes only the first matching condition.
  - **Versatile Logic:** supports complex decision flows efficiently.

# [Stay tuned!]{style="color:#FFC61A"} {background-image="images/background-harris.jpg"}
